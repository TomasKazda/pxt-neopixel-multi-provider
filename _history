{"entries":[{"timestamp":1744555876921,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"let strip: neopixel.Strip = null;\nlet currentProvider: SequenceProvider = null;\nlet providers: SequenceProvider[] = [];\nlet currentProviderIndex = 0;\n\nfunction startOnce(stripLength: number): void {\n    // Inicializace Neopixel Strip\n    strip = neopixel.create(DigitalPin.P2, stripLength, NeoPixelMode.RGB);\n    strip.setBrightness(50);\n\n    // Registrace všech poskytovatelů sekvencí (studentů)\n    providers = [\n        Novakovic,\n    ];\n\n    // Inicializace všech poskytovatelů\n    for (let provider of providers) {\n        provider.init(stripLength);\n    }\n\n    // Nastavení prvního poskytovatele jako aktuálního\n    currentProvider = providers[0];\n}\n\n// Funkce pro přepnutí na dalšího poskytovatele\nfunction switchToNextProvider(): void {\n    currentProviderIndex = (currentProviderIndex + 1) % providers.length;\n    currentProvider = providers[currentProviderIndex];\n    basic.showNumber(currentProviderIndex); // Zobrazí číslo aktuálního poskytovatele\n}\n\n// Hlavní smyčka\nfunction mainLoop(): void {\n    while (true) {\n        // Získání další řady barev\n        const line = currentProvider.nextLine();\n\n        // Zobrazení barev na LED pásku\n        for (let i = 0; i < line.data.length; i++) {\n            const color = line.data[i];\n            // Převod HSL na RGB pro neopixel\n            const rgb = hslToRgb();\n            strip.setPixelColor(i, neopixel.rgb(rgb.r, rgb.g, rgb.b));\n        }\n        strip.show();\n\n        // Čekání podle definovaného zpoždění\n        basic.pause(line.delay);\n\n        // Kontrola tlačítek pro přepnutí poskytovatele\n        if (input.buttonIsPressed(Button.A)) {\n            switchToNextProvider();\n        }\n    }\n}\n\n// Spuštění aplikace\nstartOnce(23); // 23 LED diod na pásku\nmainLoop();"],[0,"\n"]],"start1":0,"start2":0,"length1":1742,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\""],[0,"\n   "]],"start1":154,"start2":154,"length1":68,"length2":8},{"diffs":[[0,".md\""],[-1,",\n        \"types.ts\",\n        \"novakovic.ts\""],[0,"\n   "]],"start1":215,"start2":215,"length1":52,"length2":8},{"diffs":[[0,"pt-only\""],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":295,"start2":295,"length1":11,"length2":42}]},{"type":"added","filename":"types.ts","value":"// Definice základních typů\ntype Color = {\n    h: number,\n    s: number,\n    l: number\n}\n\ntype Line = {\n    data: Array<Color>,\n    delay: number\n}\n\n// Rozhraní pro studentské implementace\ninterface SequenceProvider {\n    init(length: number): void;\n    nextLine(): Line;\n}\n"},{"type":"added","filename":"novakovic.ts","value":"namespace Novakovic {\n    let stripLength: number = 0;\n    let position: number = 0;\n\n    export function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    export function nextLine(): Line {\n        const colors: Array<Color> = [];\n\n        // fake barevná sekvence, místo čerpání z připravených dat v poli\n        for (let i = 0; i < stripLength; i++) {\n            colors.push({\n                h: ((i + position) * 360 / stripLength) % 360,\n                s: 100,\n                l: 50\n            });\n        }\n\n        // Posun pro další volání\n        position = (position + 1) % stripLength;\n\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n}\n"}]},{"timestamp":1744556476074,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= 0;"],[-1,"\nlet switchRequested: boolean = false;"],[0,"\n\nfu"]],"start1":145,"start2":145,"length1":46,"length2":8},{"diffs":[[0,"ex);"],[-1,"\n}\n\nstartOnce(23); // 23 LED diod na pásku\nbasic.showNumber(currentProviderIndex);\n\nbasic.forever(function() {\n"],[1," // Zobrazí číslo aktuálního poskytovatele\n}\n\n// Hlavní smyčka\nfunction mainLoop(): void {\n    while (true) {\n        // Získání další řady barev\n    "],[0,"    "]],"start1":913,"start2":913,"length1":119,"length2":158},{"diffs":[[0,"extLine();\n\n"],[1,"        // Zobrazení barev na LED pásku\n    "],[0,"    for (let"]],"start1":1101,"start2":1101,"length1":24,"length2":68},{"diffs":[[0,") {\n        "],[1,"    "],[0,"const color "]],"start1":1202,"start2":1202,"length1":24,"length2":28},{"diffs":[[0,"ata[i];\n"],[1,"            // Převod HSL na RGB pro neopixel\n            const rgb = hslToRgb();\n    "],[0,"        "]],"start1":1238,"start2":1238,"length1":16,"length2":102},{"diffs":[[0,"xel."],[-1,"hsl(color.h, color.s, color.l"],[1,"rgb(rgb.r, rgb.g, rgb.b"],[0,"));\n    "],[-1,"}\n"],[1,"    }\n    "],[0,"    "]],"start1":1368,"start2":1368,"length1":47,"length2":49},{"diffs":[[0,"    "],[-1,"basic.pause(line.delay);\n\n    if (switchRequested)\n    {\n        switchRequested = false;\n"],[1,"    // Čekání podle definovaného zpoždění\n        basic.pause(line.delay);\n\n        // Kontrola tlačítek pro přepnutí poskytovatele\n        if (input.buttonIsPressed(Button.A)) {\n    "],[0,"    "]],"start1":1432,"start2":1432,"length1":98,"length2":191},{"diffs":[[0,"    "],[-1,"}\n})\n\ninput.onButtonPressed(Button.A, function() {\n    switchRequested = true;\n})"],[1,"    }\n    }\n}\n\n// Spuštění aplikace\nstartOnce(23); // 23 LED diod na pásku\nmainLoop();\n"]],"start1":1651,"start2":1651,"length1":85,"length2":91}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,": [\n"],[-1,"        \"novakovic.ts\",\n"],[0,"    "]],"start1":237,"start2":237,"length1":32,"length2":8},{"diffs":[[0,"ypes.ts\""],[1,",\n        \"novakovic.ts\""],[0,"\n    ],\n"]],"start1":291,"start2":291,"length1":16,"length2":40}]},{"type":"edited","filename":"novakovic.ts","patch":[{"diffs":[[0,"       }"],[1,"\n\n        // Posun pro další volání"],[0,"\n       "]],"start1":549,"start2":549,"length1":16,"length2":51},{"diffs":[[0,"  }\n"],[-1,"\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}\n"],[1,"}"],[0,"\n"]],"start1":722,"start2":722,"length1":160,"length2":6}]}]},{"timestamp":1744557051460,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ovic"],[-1,".provider"],[0,",\n  "]],"start1":466,"start2":466,"length1":17,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".ts\""],[-1,",\n        \"template.ts\""],[0,"\n   "]],"start1":319,"start2":319,"length1":31,"length2":8}]},{"type":"edited","filename":"novakovic.ts","patch":[{"diffs":[[0,"r = 0;\n\n    "],[1,"export "],[0,"function ini"]],"start1":78,"start2":78,"length1":24,"length2":31},{"diffs":[[0," }\n\n    "],[1,"export "],[0,"function"]],"start1":190,"start2":190,"length1":16,"length2":23}]},{"type":"added","filename":"template.ts","value":"namespace NameTemplate {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n    \n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n    \n        if (stripData)\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}"}]},{"timestamp":1744557639880,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"template.ts","patch":[{"diffs":[[0,"    "],[-1,"const length = 5;\n        const arr: number[] = new Array(length).fill(0);\n        console.log(arr); // [0, 0, 0, 0, 0]\n\n\n\n        if (stripData.length === 0) return {\n            data: Array(stripLength).fill({ h: 0, s: 0, l: 0 }),\n            delay: 500\n        };"],[1,"if (stripData)"],[0,"\n   "]],"start1":274,"start2":274,"length1":274,"length2":22}]}]},{"timestamp":1744558079707,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"template.ts","patch":[{"diffs":[[0,"    "],[1,"\n "],[0,"    "],[-1,"if (stripData.length === 0) {\n   "],[1,"   const length = 5;\n"],[0,"        "],[-1," "],[0,"const "],[-1,"colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors,"],[1,"arr: number[] = new Array(length).fill(0);\n        console.log(arr); // [0, 0, 0, 0, 0]\n\n\n\n        if (stripData.length === 0) return {\n            data: Array(stripLength).fill({ h: 0, s: 0, l: 0 }),\n           "],[0," del"]],"start1":265,"start2":265,"length1":238,"length2":261},{"diffs":[[0,"lay: 500"],[-1," }"],[0,"\n       "]],"start1":525,"start2":525,"length1":18,"length2":16},{"diffs":[[0," };\n"],[-1,"        \n"],[0,"    "]],"start1":541,"start2":541,"length1":17,"length2":8}]}]},{"timestamp":1744558674461,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"= [\n"],[-1,"        NameTemplate.provider,\n"],[0,"    "]],"start1":449,"start2":449,"length1":39,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".ts\""],[-1,",\n        \"kazda.ts\""],[0,"\n   "]],"start1":342,"start2":342,"length1":28,"length2":8}]},{"type":"edited","filename":"template.ts","patch":[{"diffs":[[0," 0;\n"],[-1,"        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n\n"],[0,"    "]],"start1":222,"start2":222,"length1":118,"length2":8},{"diffs":[[0," };\n"],[-1,"\n"],[0,"        "],[-1,"// todo\n\n"],[0,"\n   "]],"start1":520,"start2":520,"length1":26,"length2":16},{"diffs":[[0,"urn "],[-1,"stripData[position]"],[1,"{\n            data: colors,\n            delay: 100\n        }"],[0,";\n  "]],"start1":544,"start2":544,"length1":27,"length2":68}]},{"type":"added","filename":"kazda.ts","value":"namespace Kazda {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n        const sequence1: Array<Color> = [{ h: 270, s: 100, l: 50 }, {h: 30, s: 100, l: 50 }];\n        const sequence2: Array<Color> = [];\n\n        for (let i = 0; i < 360 -60/ 60; i += 1) {\n            sequence2.push({ h: 30, s: 100, l: 50 })\n        }\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n\n\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}"}]},{"timestamp":1744559274050,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"kazda.ts","patch":[{"diffs":[[0," < 360 -"],[1,"60/"],[0," 60; i +"]],"start1":488,"start2":488,"length1":16,"length2":19},{"diffs":[[0,"0; i += "],[-1,"60"],[1,"1"],[0,") {\n    "]],"start1":501,"start2":501,"length1":18,"length2":17},{"diffs":[[0,"sh({ h: "],[-1,"i"],[1,"30"],[0,", s: 100"]],"start1":538,"start2":538,"length1":17,"length2":18},{"diffs":[[0,"       }"],[-1,"\n\n        "],[0,"\n    }\n\n"]],"start1":568,"start2":568,"length1":26,"length2":16}]}]},{"timestamp":1744559543127,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"kazda.ts","patch":[{"diffs":[[0," [];"],[-1,"\n        const emptyLine: Array<Color> = [];\n        for (let i = 0; i < stripLength; i++) emptyLine.push({h: 0, s: 0, l: 0});\n        for (let i = 0; i < 360 - 60; i += 60) sequence2.push({ h: i, s: 100, l: 50 })"],[0,"\n\n  "]],"start1":457,"start2":457,"length1":221,"length2":8},{"diffs":[[0,"00, l: 50 })"],[-1,";"],[0,"\n        }\n\n"]],"start1":551,"start2":551,"length1":25,"length2":24},{"diffs":[[0," }\n\n"],[-1,"        // Poté použijeme fill z BetterArrays k naplnění pole\n        BetterArrays.fill(colors, { h: 0, s: 0, l: 0 }, 0, stripLength);\n\n        // NEBO s použitím repeat() z BetterArrays\n        let colors = BetterArrays.repeat({ h: 0, s: 0, l: 0 }, stripLength);\n\n        // Efekt policejních majáčků\n        const duration = 4000; // 4 sekundy v milisekundách\n        const frameDelay = 500; // 500ms mezi změnami barev\n        const frames = duration / frameDelay;\n\n        for (let i = 0; i < frames; i++) {\n            const colors = new Array(stripLength).fill(sequence1[i % 2]);\n            stripData.push({ data: colors, delay: frameDelay });\n        }\n\n        // Efekt \"hada\"\n        const snakeRuns = 3; // Počet průběhů hada\n\n        for (let run = 0; run < snakeRuns; run++) {\n            for (let position = 0; position < stripLength; position++) {\n                const colors: Array<Color> = new Array(stripLength).fill({ h: 0, s: 0, l: 0 }); // Černá barva pro pozadí\n                colors[position] = sequence2[position % sequence2.length];\n                stripData.push({ data: colors, delay: 100 }); // 100ms mezi pohyby hada\n            }\n        }\n\n        return stripData;\n"],[0,"    "]],"start1":571,"start2":571,"length1":1207,"length2":8}]}]},{"timestamp":1744560084394,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er,\n"],[-1,"        Kazda.provider\n"],[0,"    "]],"start1":508,"start2":508,"length1":31,"length2":8}]},{"type":"edited","filename":"kazda.ts","patch":[{"diffs":[[0,"sition = 0;\n"],[1,"        stripData.splice(0, stripData.length)\n"],[0,"        rebu"]],"start1":203,"start2":203,"length1":24,"length2":70},{"diffs":[[0,") {\n"],[-1,"        stripData.splice(0, stripData.length)\n"],[0,"    "]],"start1":320,"start2":320,"length1":54,"length2":8},{"diffs":[[0,"     }\n\n    "],[1,"    // Poté použijeme fill z BetterArrays k naplnění pole\n        BetterArrays.fill(colors, { h: 0, s: 0, l: 0 }, 0, stripLength);\n\n        // NEBO s použitím repeat() z BetterArrays\n        let colors = BetterArrays.repeat({ h: 0, s: 0, l: 0 }, stripLength);\n"],[0,"\n        // "]],"start1":781,"start2":781,"length1":24,"length2":284},{"diffs":[[0,"olors = "],[-1,"emptyLine.map((v) => v"],[1,"new Array(stripLength"],[0,").fill(s"]],"start1":1320,"start2":1320,"length1":38,"length2":37},{"diffs":[[0,"uns = 3;"],[1," // Počet průběhů hada"],[0,"\n\n      "]],"start1":1495,"start2":1495,"length1":16,"length2":38},{"diffs":[[0,"> = "],[-1,"emptyLine.map((v) => v"],[1,"new Array(stripLength).fill({ h: 0, s: 0, l: 0 }"],[0,"); /"]],"start1":1693,"start2":1693,"length1":30,"length2":56},{"diffs":[[0,"}); "],[-1,"\n            }\n        }"],[1,"// 100ms mezi pohyby hada\n            }\n        }\n\n        return stripData;\n    "],[0,"    "]],"start1":1907,"start2":1907,"length1":32,"length2":89},{"diffs":[[0,"odo\n"],[-1,"        position = (position + 1) % stripLength"],[0,"\n\n  "]],"start1":2308,"start2":2308,"length1":55,"length2":8}]}]},{"timestamp":1744560605828,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"kazda.ts","patch":[{"diffs":[[0,"= 3;"],[-1,"\n        const snakeLength = sequence2.length;"],[0,"\n\n  "]],"start1":1240,"start2":1240,"length1":54,"length2":8},{"diffs":[[0,"n = "],[-1,"-snakeLength"],[1,"0"],[0,"; po"]],"start1":1326,"start2":1326,"length1":20,"length2":9},{"diffs":[[0," v);"],[-1,"\n\n                for (let i = 0; i < snakeLength; i++) {\n                    const pixelPosition = position + i;\n                    if (pixelPosition >= 0 && pixelPosition < stripLength) {\n                        colors[pixelP"],[1," // Černá barva pro pozadí\n                colors[position] = sequence2[p"],[0,"osition"],[-1,"] ="],[1," %"],[0," seq"]],"start1":1436,"start2":1436,"length1":246,"length2":90},{"diffs":[[0,"nce2"],[-1,"[i"],[1,".length"],[0,"];\n"],[-1,"                    }\n                }\n"],[0,"    "]],"start1":1528,"start2":1528,"length1":53,"length2":18},{"diffs":[[0,"lay: 100 });"],[1," "],[0,"\n           "]],"start1":1591,"start2":1591,"length1":24,"length2":25},{"diffs":[[0,"   }"],[-1,"\n \n"],[0,"    "],[-1,"    console.log(\"done\");"],[0,"\n   "]],"start1":1624,"start2":1624,"length1":39,"length2":12}]}]},{"timestamp":1744561187783,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"kazda.ts","patch":[{"diffs":[[0,"er = 0;\n"],[1,"    let position: number = 0;\n"],[0,"    cons"]],"start1":43,"start2":43,"length1":16,"length2":46},{"diffs":[[0,"> = [];\n"],[-1,""],[0,"\n    fun"]],"start1":112,"start2":112,"length1":16,"length2":16},{"diffs":[[0,"length;\n"],[1,"        position = 0;\n"],[0,"        "]],"start1":185,"start2":185,"length1":16,"length2":38},{"diffs":[[0," [{ h: 2"],[-1,"5"],[1,"7"],[0,"0, s: 10"]],"start1":363,"start2":363,"length1":17,"length2":17},{"diffs":[[0," }, {h: "],[-1,"1"],[1,"3"],[0,"0, s: 10"]],"start1":388,"start2":388,"length1":17,"length2":17},{"diffs":[[0," 0, l: 0});\n"],[-1,""],[0,"        for "]],"start1":576,"start2":576,"length1":24,"length2":24},{"diffs":[[0,": 50 })\n"],[1,"\n        for (let i = 0; i < 360 - 60; i += 60) {\n            sequence2.push({ h: i, s: 100, l: 50 });\n        }\n\n"],[0,"    \n   "]],"start1":667,"start2":667,"length1":16,"length2":130},{"diffs":[[0,"    "],[-1,"lstripData.shift()"],[1,"// todo\n        position = (position + 1) % stripLength\n"],[0,"\n   "]],"start1":2210,"start2":2210,"length1":26,"length2":64}]}]},{"timestamp":1744561784320,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"er): void {\n"],[1,"    // Inicializace Neopixel Strip\n"],[0,"    strip = "]],"start1":225,"start2":225,"length1":24,"length2":59},{"diffs":[[0,"er,\n    "],[-1,"];\n"],[1,"    Kazda.provider\n    ];\n\n    // Inicializace všech poskytovatelů"],[0,"\n    for"]],"start1":508,"start2":508,"length1":19,"length2":82},{"diffs":[[0,"\n    }\n\n"],[1,"    // Nastavení prvního poskytovatele jako aktuálního\n"],[0,"    curr"]],"start1":656,"start2":656,"length1":16,"length2":71}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"late.ts\""],[1,",\n        \"kazda.ts\""],[0,"\n    ],\n"]],"start1":338,"start2":338,"length1":16,"length2":36}]},{"type":"edited","filename":"template.ts","patch":[{"diffs":[[0,"er = 0;\n"],[1,"    let position: number = 0;\n"],[0,"    cons"]],"start1":50,"start2":50,"length1":16,"length2":46},{"diffs":[[0,"length;\n"],[1,"        position = 0;\n"],[0,"        "]],"start1":196,"start2":196,"length1":16,"length2":38},{"diffs":[[0,"ripData["],[-1,"0"],[1,"position"],[0,"];\n    }"]],"start1":670,"start2":670,"length1":17,"length2":24}]},{"type":"removed","filename":"kazda.ts","value":"namespace Kazda {\n    let stripLength: number = 0;\n    const stripData: Array<Line> = [];\n\n    function init(length: number): void {\n        stripLength = length;\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n        stripData.splice(0, stripData.length)\n        const sequence1: Array<Color> = [{ h: 250, s: 100, l: 50 }, {h: 10, s: 100, l: 50 }];\n        const sequence2: Array<Color> = [];\n        const emptyLine: Array<Color> = [];\n        for (let i = 0; i < stripLength; i++) emptyLine.push({h: 0, s: 0, l: 0});\n        for (let i = 0; i < 360 - 60; i += 60) sequence2.push({ h: i, s: 100, l: 50 })\n    \n        // Efekt policejních majáčků\n        const duration = 4000; // 4 sekundy v milisekundách\n        const frameDelay = 500; // 500ms mezi změnami barev\n        const frames = duration / frameDelay;\n\n        for (let i = 0; i < frames; i++) {\n            const colors = emptyLine.map((v) => v).fill(sequence1[i % 2]);\n            stripData.push({ data: colors, delay: frameDelay });\n        }\n\n        // Efekt \"hada\"\n        const snakeRuns = 3;\n        const snakeLength = sequence2.length;\n\n        for (let run = 0; run < snakeRuns; run++) {\n            for (let position = -snakeLength; position < stripLength; position++) {\n                const colors: Array<Color> = emptyLine.map((v) => v);\n\n                for (let i = 0; i < snakeLength; i++) {\n                    const pixelPosition = position + i;\n                    if (pixelPosition >= 0 && pixelPosition < stripLength) {\n                        colors[pixelPosition] = sequence2[i];\n                    }\n                }\n                stripData.push({ data: colors, delay: 100 });\n            }\n        }\n \n        console.log(\"done\");\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        lstripData.shift()\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}"}]},{"timestamp":1744562142171,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"tton.A, "],[1,"function"],[0,"() {\n   "]],"start1":1365,"start2":1365,"length1":16,"length2":24}]}]},{"timestamp":1744565201532,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0," () "],[-1,"´>"],[0,"{\n  "]],"start1":1372,"start2":1372,"length1":10,"length2":8}]}]},{"timestamp":1744565203924,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"rs: "],[-1,"Array<"],[0,"Sequ"]],"start1":91,"start2":91,"length1":14,"length2":8},{"diffs":[[0,"Provider"],[-1,">"],[1,"[]"],[0," = [];\nl"]],"start1":103,"start2":103,"length1":17,"length2":18},{"diffs":[[0,"false;\n\n"],[-1,"const"],[1,"function"],[0," startOn"]],"start1":181,"start2":181,"length1":21,"length2":24},{"diffs":[[0,"tartOnce"],[-1," = "],[0,"(stripLe"]],"start1":199,"start2":199,"length1":19,"length2":16},{"diffs":[[0,"umber): void"],[-1," =>"],[0," {\n    strip"]],"start1":222,"start2":222,"length1":27,"length2":24},{"diffs":[[0,"[0];\n}\n\n"],[-1,"const"],[1,"// Funkce pro přepnutí na dalšího poskytovatele\nfunction"],[0," switchT"]],"start1":597,"start2":597,"length1":21,"length2":72},{"diffs":[[0,"ider"],[-1," = "],[0,"(): void"],[-1," =>"],[0," {\n "]],"start1":678,"start2":678,"length1":22,"length2":16},{"diffs":[[0,"forever("],[-1,"() =>"],[1,"function()"],[0," {\n    c"]],"start1":955,"start2":955,"length1":21,"length2":26},{"diffs":[[0," () "],[-1,"=> {"],[1,"´>{\n    "],[0,"swit"]],"start1":1372,"start2":1372,"length1":12,"length2":16},{"diffs":[[0,"d = true"],[1,";\n"],[0,"})"]],"start1":1398,"start2":1398,"length1":10,"length2":12}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":350,"start2":350,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1744555876920,"editorVersion":"7.0.61","text":{"main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"pxt-neopixel-multi-provider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1744557716946,"editorVersion":"7.0.61","text":{"novakovic.ts":"namespace Novakovic {\n    let stripLength: number = 0;\n    let position: number = 0;\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n        const colors: Array<Color> = [];\n\n        // fake barevná sekvence, místo čerpání z připravených dat v poli\n        for (let i = 0; i < stripLength; i++) {\n            colors.push({\n                h: ((i + position) * 360 / stripLength) % 360,\n                s: 100,\n                l: 50\n            });\n        }\n        position = (position + 1) % stripLength;\n\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}\n\n","main.ts":"let strip: neopixel.Strip = null;\nlet currentProvider: SequenceProvider = null;\nlet providers: SequenceProvider[] = [];\nlet currentProviderIndex = 0;\nlet switchRequested: boolean = false;\n\nfunction startOnce(stripLength: number): void {\n    // Inicializace Neopixel Strip\n    strip = neopixel.create(DigitalPin.P2, stripLength, NeoPixelMode.RGB);\n    strip.setBrightness(50);\n\n    // Registrace všech poskytovatelů sekvencí (studentů)\n    providers = [\n        Novakovic.provider,\n    ];\n\n    // Inicializace všech poskytovatelů\n    for (let provider of providers) {\n        provider.init(stripLength);\n    }\n\n    // Nastavení prvního poskytovatele jako aktuálního\n    currentProvider = providers[0];\n}\n\n// Funkce pro přepnutí na dalšího poskytovatele\nfunction switchToNextProvider(): void {\n    currentProviderIndex = (currentProviderIndex + 1) % providers.length;\n    currentProvider = providers[currentProviderIndex];\n    basic.showNumber(currentProviderIndex);\n}\n\nstartOnce(23); // 23 LED diod na pásku\nbasic.showNumber(currentProviderIndex);\n\nbasic.forever(function() {\n    const line = currentProvider.nextLine();\n\n    for (let i = 0; i < line.data.length; i++) {\n        const color = line.data[i];\n        strip.setPixelColor(i, neopixel.hsl(color.h, color.s, color.l));\n    }\n    strip.show();\n\n    basic.pause(line.delay);\n\n    if (switchRequested)\n    {\n        switchRequested = false;\n        switchToNextProvider();\n    }\n})\n\ninput.onButtonPressed(Button.A, function() {\n    switchRequested = true;\n})","README.md":"","types.ts":"// Definice základních typů\ntype Color = {\n    h: number,\n    s: number,\n    l: number\n}\n\ntype Line = {\n    data: Array<Color>,\n    delay: number\n}\n\n// Rozhraní pro studentské implementace\ninterface SequenceProvider {\n    init(length: number): void;\n    nextLine(): Line;\n}\n","template.ts":"namespace NameTemplate {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n    \n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n    \n        if (stripData)\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","pxt.json":"{\n    \"name\": \"pxt-neopixel-multi-provider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"novakovic.ts\",\n        \"main.ts\",\n        \"README.md\",\n        \"types.ts\",\n        \"template.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1744559535910,"editorVersion":"7.0.61","text":{"novakovic.ts":"namespace Novakovic {\n    let stripLength: number = 0;\n    let position: number = 0;\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n        const colors: Array<Color> = [];\n\n        // fake barevná sekvence, místo čerpání z připravených dat v poli\n        for (let i = 0; i < stripLength; i++) {\n            colors.push({\n                h: ((i + position) * 360 / stripLength) % 360,\n                s: 100,\n                l: 50\n            });\n        }\n        position = (position + 1) % stripLength;\n\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}\n\n","main.ts":"let strip: neopixel.Strip = null;\nlet currentProvider: SequenceProvider = null;\nlet providers: SequenceProvider[] = [];\nlet currentProviderIndex = 0;\nlet switchRequested: boolean = false;\n\nfunction startOnce(stripLength: number): void {\n    // Inicializace Neopixel Strip\n    strip = neopixel.create(DigitalPin.P2, stripLength, NeoPixelMode.RGB);\n    strip.setBrightness(50);\n\n    // Registrace všech poskytovatelů sekvencí (studentů)\n    providers = [\n        NameTemplate.provider,\n        Novakovic.provider,\n    ];\n\n    // Inicializace všech poskytovatelů\n    for (let provider of providers) {\n        provider.init(stripLength);\n    }\n\n    // Nastavení prvního poskytovatele jako aktuálního\n    currentProvider = providers[0];\n}\n\n// Funkce pro přepnutí na dalšího poskytovatele\nfunction switchToNextProvider(): void {\n    currentProviderIndex = (currentProviderIndex + 1) % providers.length;\n    currentProvider = providers[currentProviderIndex];\n    basic.showNumber(currentProviderIndex);\n}\n\nstartOnce(23); // 23 LED diod na pásku\nbasic.showNumber(currentProviderIndex);\n\nbasic.forever(function() {\n    const line = currentProvider.nextLine();\n\n    for (let i = 0; i < line.data.length; i++) {\n        const color = line.data[i];\n        strip.setPixelColor(i, neopixel.hsl(color.h, color.s, color.l));\n    }\n    strip.show();\n\n    basic.pause(line.delay);\n\n    if (switchRequested)\n    {\n        switchRequested = false;\n        switchToNextProvider();\n    }\n})\n\ninput.onButtonPressed(Button.A, function() {\n    switchRequested = true;\n})","README.md":"","types.ts":"// Definice základních typů\ntype Color = {\n    h: number,\n    s: number,\n    l: number\n}\n\ntype Line = {\n    data: Array<Color>,\n    delay: number\n}\n\n// Rozhraní pro studentské implementace\ninterface SequenceProvider {\n    init(length: number): void;\n    nextLine(): Line;\n}\n","template.ts":"namespace NameTemplate {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n    \n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n\n\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","kazda.ts":"namespace Kazda {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n        const sequence1: Array<Color> = [{ h: 270, s: 100, l: 50 }, {h: 30, s: 100, l: 50 }];\n        const sequence2: Array<Color> = [];\n\n        for (let i = 0; i < 360 - 60; i += 60) {\n            sequence2.push({ h: i, s: 100, l: 50 })\n        }\n\n        for (let i)\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n\n\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","pxt.json":"{\n    \"name\": \"pxt-neopixel-multi-provider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"novakovic.ts\",\n        \"main.ts\",\n        \"README.md\",\n        \"types.ts\",\n        \"template.ts\",\n        \"kazda.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1744561412877,"editorVersion":"7.0.61","text":{"novakovic.ts":"namespace Novakovic {\n    let stripLength: number = 0;\n    let position: number = 0;\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n        const colors: Array<Color> = [];\n\n        // fake barevná sekvence, místo čerpání z připravených dat v poli\n        for (let i = 0; i < stripLength; i++) {\n            colors.push({\n                h: ((i + position) * 360 / stripLength) % 360,\n                s: 100,\n                l: 50\n            });\n        }\n        position = (position + 1) % stripLength;\n\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}\n\n","main.ts":"let strip: neopixel.Strip = null;\nlet currentProvider: SequenceProvider = null;\nlet providers: SequenceProvider[] = [];\nlet currentProviderIndex = 0;\nlet switchRequested: boolean = false;\n\nfunction startOnce(stripLength: number): void {\n    // Inicializace Neopixel Strip\n    strip = neopixel.create(DigitalPin.P2, stripLength, NeoPixelMode.RGB);\n    strip.setBrightness(50);\n\n    // Registrace všech poskytovatelů sekvencí (studentů)\n    providers = [\n        NameTemplate.provider,\n        Novakovic.provider,\n        Kazda.provider\n    ];\n\n    // Inicializace všech poskytovatelů\n    for (let provider of providers) {\n        provider.init(stripLength);\n    }\n\n    // Nastavení prvního poskytovatele jako aktuálního\n    currentProvider = providers[0];\n}\n\n// Funkce pro přepnutí na dalšího poskytovatele\nfunction switchToNextProvider(): void {\n    currentProviderIndex = (currentProviderIndex + 1) % providers.length;\n    currentProvider = providers[currentProviderIndex];\n    basic.showNumber(currentProviderIndex);\n}\n\nstartOnce(23); // 23 LED diod na pásku\nbasic.showNumber(currentProviderIndex);\n\nbasic.forever(function() {\n    const line = currentProvider.nextLine();\n\n    for (let i = 0; i < line.data.length; i++) {\n        const color = line.data[i];\n        strip.setPixelColor(i, neopixel.hsl(color.h, color.s, color.l));\n    }\n    strip.show();\n\n    basic.pause(line.delay);\n\n    if (switchRequested)\n    {\n        switchRequested = false;\n        switchToNextProvider();\n    }\n})\n\ninput.onButtonPressed(Button.A, function() {\n    switchRequested = true;\n})","README.md":"","types.ts":"// Definice základních typů\ntype Color = {\n    h: number,\n    s: number,\n    l: number\n}\n\ntype Line = {\n    data: Array<Color>,\n    delay: number\n}\n\n// Rozhraní pro studentské implementace\ninterface SequenceProvider {\n    init(length: number): void;\n    nextLine(): Line;\n}\n","template.ts":"namespace NameTemplate {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n    \n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n\n\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","kazda.ts":"namespace Kazda {\n    let stripLength: number = 0;\n    let position: number = 0;\n    const stripData: Array<Line> = [];\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n        stripData.splice(0, stripData.length)\n        const sequence1: Array<Color> = [{ h: 250, s: 100, l: 50 }, {h: 10, s: 100, l: 50 }];\n        const sequence2: Array<Color> = [];\n        const emptyLine: Array<Color> = [];\n        for (let i = 0; i < stripLength; i++) emptyLine.push({h: 0, s: 0, l: 0});\n        for (let i = 0; i < 360 - 60; i += 60) sequence2.push({ h: i, s: 100, l: 50 })\n\n        for (let i = 0; i < 360 - 60; i += 60) {\n            sequence2.push({ h: i, s: 100, l: 50 });\n        }\n\n    \n        // Efekt policejních majáčků\n        const duration = 4000; // 4 sekundy v milisekundách\n        const frameDelay = 500; // 500ms mezi změnami barev\n        const frames = duration / frameDelay;\n\n        for (let i = 0; i < frames; i++) {\n            const colors = emptyLine.map((v) => v).fill(sequence1[i % 2]);\n            stripData.push({ data: colors, delay: frameDelay });\n        }\n\n        // Efekt \"hada\"\n        const snakeRuns = 3;\n        const snakeLength = sequence2.length;\n\n        for (let run = 0; run < snakeRuns; run++) {\n            for (let position = -snakeLength; position < stripLength; position++) {\n                const colors: Array<Color> = emptyLine.map((v) => v);\n\n                for (let i = 0; i < snakeLength; i++) {\n                    const pixelPosition = position + i;\n                    if (pixelPosition >= 0 && pixelPosition < stripLength) {\n                        colors[pixelPosition] = sequence2[i];\n                    }\n                }\n                stripData.push({ data: colors, delay: 100 });\n            }\n        }\n \n        console.log(\"done\");\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n        position = (position + 1) % stripLength\n\n        return stripData[position];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","pxt.json":"{\n    \"name\": \"pxt-neopixel-multi-provider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"novakovic.ts\",\n        \"main.ts\",\n        \"README.md\",\n        \"types.ts\",\n        \"template.ts\",\n        \"kazda.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}},{"timestamp":1744565201532,"editorVersion":"7.0.61","text":{"novakovic.ts":"namespace Novakovic {\n    let stripLength: number = 0;\n    let position: number = 0;\n\n    function init(length: number): void {\n        stripLength = length;\n        position = 0;\n    }\n\n    function nextLine(): Line {\n        const colors: Array<Color> = [];\n\n        // fake barevná sekvence, místo čerpání z připravených dat v poli\n        for (let i = 0; i < stripLength; i++) {\n            colors.push({\n                h: ((i + position) * 360 / stripLength) % 360,\n                s: 100,\n                l: 50\n            });\n        }\n        position = (position + 1) % stripLength;\n\n        return {\n            data: colors,\n            delay: 100\n        };\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}\n\n","main.ts":"let strip: neopixel.Strip = null;\nlet currentProvider: SequenceProvider = null;\nlet providers: SequenceProvider[] = [];\nlet currentProviderIndex = 0;\nlet switchRequested: boolean = false;\n\nfunction startOnce(stripLength: number): void {\n    strip = neopixel.create(DigitalPin.P2, stripLength, NeoPixelMode.RGB);\n    strip.setBrightness(50);\n\n    // Registrace všech poskytovatelů sekvencí (studentů)\n    providers = [\n        NameTemplate.provider,\n        Novakovic.provider,\n    ];\n\n    for (let provider of providers) {\n        provider.init(stripLength);\n    }\n\n    currentProvider = providers[0];\n}\n\n// Funkce pro přepnutí na dalšího poskytovatele\nfunction switchToNextProvider(): void {\n    currentProviderIndex = (currentProviderIndex + 1) % providers.length;\n    currentProvider = providers[currentProviderIndex];\n    basic.showNumber(currentProviderIndex);\n}\n\nstartOnce(23); // 23 LED diod na pásku\nbasic.showNumber(currentProviderIndex);\n\nbasic.forever(function() {\n    const line = currentProvider.nextLine();\n\n    for (let i = 0; i < line.data.length; i++) {\n        const color = line.data[i];\n        strip.setPixelColor(i, neopixel.hsl(color.h, color.s, color.l));\n    }\n    strip.show();\n\n    basic.pause(line.delay);\n\n    if (switchRequested)\n    {\n        switchRequested = false;\n        switchToNextProvider();\n    }\n})\n\ninput.onButtonPressed(Button.A, function() {\n    switchRequested = true;\n})","README.md":"","types.ts":"// Definice základních typů\ntype Color = {\n    h: number,\n    s: number,\n    l: number\n}\n\ntype Line = {\n    data: Array<Color>,\n    delay: number\n}\n\n// Rozhraní pro studentské implementace\ninterface SequenceProvider {\n    init(length: number): void;\n    nextLine(): Line;\n}\n","template.ts":"namespace NameTemplate {\n    let stripLength: number = 0;\n    const stripData: Array<Line> = [];\n    \n    function init(length: number): void {\n        stripLength = length;\n        stripData.splice(0, stripData.length)\n        rebuildStrips();\n    }\n\n    function rebuildStrips() {\n\n    }\n\n    function nextLine(): Line {\n        if (stripData.length === 0) {\n            const colors: Array<Color> = [];\n            for (let i = 0; i < stripLength; i++) {\n                colors.push({ h: 0, s: 0, l: 0 });\n            }\n            return { data: colors, delay: 500 }\n        };\n\n        // todo\n\n\n        return stripData[0];\n    }\n\n    // Exportovaný objekt implementující rozhraní\n    export const provider: SequenceProvider = {\n        init: init,\n        nextLine: nextLine\n    };\n}","pxt.json":"{\n    \"name\": \"pxt-neopixel-multi-provider\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"neopixel\": \"github:microsoft/pxt-neopixel#v0.7.6\"\n    },\n    \"files\": [\n        \"novakovic.ts\",\n        \"main.ts\",\n        \"README.md\",\n        \"types.ts\",\n        \"template.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1744565449940}